package xyz.qwewqa.relivesim.stage

data class CharacterState(
    val characterData: CharacterData,
    var currentHP: Int = 1,
    var currentBrilliance: Int = 50,
    val maxHp: ValueBuffModifier = ValueBuffModifier(),
    val actPower: ValueBuffModifier = ValueBuffModifier(),
    val normalDefense: ValueBuffModifier = ValueBuffModifier(),
    val specialDefense: ValueBuffModifier = ValueBuffModifier(),
    val agility: ValueBuffModifier = ValueBuffModifier(),
    val dexterity: SimpleModifier<Percent> = SimpleModifier(0.percent),
    val critical: SimpleModifier<Percent> = SimpleModifier(0.percent),
    val accuracy: SimpleModifier<Percent> = SimpleModifier(0.percent),
    val evasion: SimpleModifier<Percent> = SimpleModifier(0.percent),
    val effectiveDamage: SimpleModifier<Percent> = SimpleModifier(0.percent),
    val normalReflect: SimpleModifier<Percent> = SimpleModifier(0.percent),
    val specialReflect: SimpleModifier<Percent> = SimpleModifier(0.percent),
    val brillianceGain: SimpleModifier<Percent> = SimpleModifier(0.percent),
    val absorb: SimpleModifier<Percent> = SimpleModifier(0.percent),
    val negativeEffectBlock: SimpleModifier<Percent> = SimpleModifier(0.percent),
    val positiveEffectBlock: SimpleModifier<Percent> = SimpleModifier(0.percent),
    val climaxDamage: SimpleModifier<Percent> = SimpleModifier(0.percent),
    val damageDealtUp: SimpleModifier<Percent> = SimpleModifier(0.percent),
    val damageTakenDown: SimpleModifier<Percent> = SimpleModifier(0.percent),
    val damageTakenDownBuff: SimpleModifier<Percent> = SimpleModifier(0.percent),
    var specialEffects: SpecialEffectState = SpecialEffectState(),
    var eventBonus: Percent = 0.percent,
    var inCA: Boolean = false,
    var evadeCount: Int = 0,
    var fortitudeCount: Int = 0,
    var reviveCount: Int = 0,
    var specialActiveEffects: List<ActiveEffect> = emptyList(),
    var positiveTimedEffects: List<ActiveEffect> = emptyList(),
    var negativeTimedEffects: List<ActiveEffect> = emptyList(),
    var positiveStackedEffects: List<ActiveEffect> = emptyList(),
) {
    val alive get() = currentHP > 0
}